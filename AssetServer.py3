# AssetServer is a python-based online data store that carries asset-tracking information used by the Console web application

# This is part of a demonstration system. In a real implementation, this server application might be implemented in Java,
# store data in a SQL database, provide for multi-agency use and user authentication.

# (run in Python 3)

import Assets
import http.server
import socketserver
import json
import time

PORT = 8001

# in a real implementation, tokens would be securely generated by an identity and access management system;
# for demo purposes, they're hardcoded here
TOKEN_AGENCY_MAP = {}
TOKEN_AGENCY_MAP["AD217824CDA3"] = "NOAA"
TOKEN_AGENCY_MAP["BB889B6D5F77"] = "USN"
TOKEN_AGENCY_MAP["1D353F86D4A9"] = "WHOI"

def find_agency(auth_token):
    global TOKEN_AGENCY_MAP
    if auth_token in TOKEN_AGENCY_MAP:
        return TOKEN_AGENCY_MAP[auth_token]
    else:
        return None

assets = {}
assets["NOAA"] = {}
assets["USN"] = {}
assets["WHOI"] = {}

# Asset objects have an ID, name, agency, facility, current project
assets["WHOI"]["DSV-2"] = Assets.Asset("DSV-2", "Alvin", "WHOI", "Benthic Explorer", "unknown")

asset_events = {}
asset_events["WHOI"] = {}
asset_events["WHOI"]["DSV-2"] = {}

# AssetEvent objects have an assetId, event timestamp, latitude, longitude, depth, status
asset_events["WHOI"]["DSV-2"][1607055600] = Assets.AssetEvent("DSV-2",1607055600,47.00,-122.0, 0, "stowed")
asset_events["WHOI"]["DSV-2"][1607055610] = Assets.AssetEvent("DSV-2",1607055610,47.00,-122.0, 0, "launching")
asset_events["WHOI"]["DSV-2"][1607055650] = Assets.AssetEvent("DSV-2",1607055650,47.00,-122.03, 10, "operating")
assets["WHOI"]["DSV-2"].lastUpdate = asset_events["WHOI"]["DSV-2"][1607055650]


class MyHandler(http.server.SimpleHTTPRequestHandler):

    def __init__(self,req,client_addr,server):
        http.server.SimpleHTTPRequestHandler.__init__(self,req,client_addr,server)

    # clients send a GET request to retrieve data for an asset
    # GET /asset/<assetId> retrieves both metadata and latest tracking data for the indicated asset

    def do_GET(self):
        ASSET_URL_PATH = "/asset/"
        if self.path.startswith(ASSET_URL_PATH):
            agency = find_agency(self.headers.get('auth-token'))
            if not agency:
                print("Missing auth token - request ignored")
                return

            if "?" in self.path:
                url_tokens = self.path.split("?")
                url_path = url_tokens[0]
                query_tokens = url_tokens[1].split("&")
            else:
                url_path = self.path
                query_tokens = None

            object_id = url_path[len(ASSET_URL_PATH):]

            global asset_events
            assetObj = assets[agency].get(object_id, None)
            response = Assets.ObjectEncoder().encode(assetObj)
            self.send_response(200)
            self.send_header("Content-type", "text/html")
            self.send_header("Access-Control-Allow-Origin", "*")
            self.end_headers()
            self.wfile.write(str.encode(response))
        else:
            # this handles normal GET operations like serving up .html and .js files
            super().do_GET()

    def do_OPTIONS(self):
        print("OPTIONS")
        self.send_response(200)
        self.send_header("Access-Control-Allow-Origin", "*")
        self.send_header("Access-Control-Allow-Headers", "*")
        self.end_headers()
        self.wfile.write(str.encode(""))

    # POST requests are data injection from test/demo clients these modify the aggregate data
    # POST /assetUpdate with a body adds or replaces data for the indicated asset
    #   (for instance, the body can contain a list of timestamped tracking records)
    def do_POST(self):
        if self.path == ("/assetUpdate"):
            agency = find_agency(self.headers.get('auth-token'))
            if not agency:
                print("Missing auth token - request ignored")
                return

            content_len = int(self.headers.get('content-length', 0))
            post_body = self.rfile.read(content_len)   # results in bytes, not string
            #body_json = post_body.decode("utf-8")
            # print("POST content:" + body_json)
            # objectData=json.loads(body_json)

            tokens = post_body.decode("utf-8").split("|")
            asset_id =  tokens[0]
            timestamp = tokens[1]
            latitude =  tokens[2]
            longitude = tokens[3]
            depth     = tokens[4]
            status    = tokens[5]

            # update the asset record data
            asset_events[agency][asset_id][timestamp] = Assets.AssetEvent(asset_id,timestamp,latitude,longitude,depth,status)
            assets[agency][asset_id].lastUpdate = asset_events[agency][asset_id][timestamp]
            
            self.send_response(202)
            self.send_header("Access-Control-Allow-Origin", "*")
            self.end_headers()
            self.wfile.write(str.encode("\n"))

    def do_PUT(self):
        global objectData
        print("PUT")
        self.send_response(202)

myHandler = MyHandler

with socketserver.TCPServer(("", PORT), myHandler) as httpd:
    print("serving at port", PORT)
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    httpd.server_close()
    print("server exit")
    print("")
